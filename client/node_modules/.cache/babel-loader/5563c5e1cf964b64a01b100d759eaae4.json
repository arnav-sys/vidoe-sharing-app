{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ARNAV\\\\Documents\\\\Video-Chat\\\\client\\\\src\\\\context\\\\VideoState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport VideoContext from \"./VideoContext\";\nimport { io } from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = \"https://fathomless-tundra-67025.herokuapp.com/\"; // const SERVER_URL = \"http://localhost:5000/\";\n\nexport const socket = io(URL);\n\nconst VideoState = ({\n  children\n}) => {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [chat, setChat] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [otherUser, setOtherUser] = useState(\"\");\n  const [myVdoStatus, setMyVdoStatus] = useState(true);\n  const [userVdoStatus, setUserVdoStatus] = useState();\n  const [myMicStatus, setMyMicStatus] = useState(true);\n  const [userMicStatus, setUserMicStatus] = useState();\n  const [msgRcv, setMsgRcv] = useState(\"\");\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n\n    if (localStorage.getItem(\"name\")) {\n      setName(localStorage.getItem(\"name\"));\n    }\n\n    socket.on(\"me\", id => setMe(id));\n    socket.on(\"endCall\", () => {\n      window.location.reload();\n    });\n    socket.on(\"updateUserMedia\", ({\n      type,\n      currentMediaStatus\n    }) => {\n      if (currentMediaStatus !== null || currentMediaStatus !== []) {\n        switch (type) {\n          case \"video\":\n            setUserVdoStatus(currentMediaStatus);\n            break;\n\n          case \"mic\":\n            setUserMicStatus(currentMediaStatus);\n            break;\n\n          default:\n            setUserMicStatus(currentMediaStatus[0]);\n            setUserVdoStatus(currentMediaStatus[1]);\n            break;\n        }\n      }\n    });\n    socket.on(\"callUser\", ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    socket.on(\"msgRcv\", ({\n      name,\n      msg: value,\n      sender\n    }) => {\n      setMsgRcv({\n        value,\n        sender\n      });\n      setTimeout(() => {\n        setMsgRcv({});\n      }, 2000);\n    });\n  }, []); // useEffect(() => {\n  //   console.log(chat);\n  // }, [chat]);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    setOtherUser(call.from);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"answerCall\", {\n        signal: data,\n        to: call.from,\n        userName: name,\n        type: \"both\",\n        myMediaStatus: [myMicStatus, myVdoStatus]\n      });\n    });\n    peer.on(\"stream\", currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    setOtherUser(id);\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on(\"stream\", currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on(\"callAccepted\", ({\n      signal,\n      userName\n    }) => {\n      setCallAccepted(true);\n      setUserName(userName);\n      peer.signal(signal);\n      socket.emit(\"updateMyMedia\", {\n        type: \"both\",\n        currentMediaStatus: [myMicStatus, myVdoStatus]\n      });\n    });\n    connectionRef.current = peer;\n  };\n\n  const updateVideo = () => {\n    setMyVdoStatus(currentStatus => {\n      socket.emit(\"updateMyMedia\", {\n        type: \"video\",\n        currentMediaStatus: !currentStatus\n      });\n      stream.getVideoTracks()[0].enabled = !currentStatus;\n      return !currentStatus;\n    });\n  };\n\n  const updateMic = () => {\n    setMyMicStatus(currentStatus => {\n      socket.emit(\"updateMyMedia\", {\n        type: \"mic\",\n        currentMediaStatus: !currentStatus\n      });\n      stream.getAudioTracks()[0].enabled = !currentStatus;\n      return !currentStatus;\n    });\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    socket.emit(\"endCall\", {\n      id: otherUser\n    });\n    window.location.reload();\n  };\n\n  const leaveCall1 = () => {\n    socket.emit(\"endCall\", {\n      id: otherUser\n    });\n  };\n\n  const sendMsg = value => {\n    socket.emit(\"msgUser\", {\n      name,\n      to: otherUser,\n      msg: value,\n      sender: name\n    });\n    let msg = {};\n    msg.msg = value;\n    msg.type = \"sent\";\n    msg.timestamp = Date.now();\n    msg.sender = name;\n    setChat([...chat, msg]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(VideoContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      sendMsg,\n      msgRcv,\n      chat,\n      setChat,\n      setMsgRcv,\n      setOtherUser,\n      leaveCall1,\n      userName,\n      myVdoStatus,\n      setMyVdoStatus,\n      userVdoStatus,\n      setUserVdoStatus,\n      updateVideo,\n      myMicStatus,\n      userMicStatus,\n      updateMic\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VideoState, \"drCUHiLqZ8u5w4U45txon2fB9uo=\");\n\n_c = VideoState;\nexport default VideoState;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoState\");","map":{"version":3,"sources":["C:/Users/ARNAV/Documents/Video-Chat/client/src/context/VideoState.js"],"names":["React","useState","useEffect","useRef","VideoContext","io","Peer","URL","socket","VideoState","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","chat","setChat","name","setName","call","setCall","me","setMe","userName","setUserName","otherUser","setOtherUser","myVdoStatus","setMyVdoStatus","userVdoStatus","setUserVdoStatus","myMicStatus","setMyMicStatus","userMicStatus","setUserMicStatus","msgRcv","setMsgRcv","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","localStorage","getItem","on","id","window","location","reload","type","currentMediaStatus","from","callerName","signal","isReceivingCall","msg","value","sender","setTimeout","answerCall","peer","initiator","trickle","data","emit","to","myMediaStatus","callUser","userToCall","signalData","updateVideo","currentStatus","getVideoTracks","enabled","updateMic","getAudioTracks","leaveCall","destroy","leaveCall1","sendMsg","timestamp","Date","now"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,GAAG,GAAG,gDAAZ,C,CACA;;AAEA,OAAO,MAAMC,MAAM,GAAGH,EAAE,CAACE,GAAD,CAAjB;;AAEP,MAAME,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,EAApC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACsB,EAAD,EAAKC,KAAL,IAAcvB,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC4B,WAAD,EAAcC,cAAd,IAAgC7B,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC8B,aAAD,EAAgBC,gBAAhB,IAAoC/B,QAAQ,EAAlD;AACA,QAAM,CAACgC,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACkC,aAAD,EAAgBC,gBAAhB,IAAoCnC,QAAQ,EAAlD;AACA,QAAM,CAACoC,MAAD,EAASC,SAAT,IAAsBrC,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMsC,OAAO,GAAGpC,MAAM,EAAtB;AACA,QAAMqC,SAAS,GAAGrC,MAAM,EAAxB;AACA,QAAMsC,aAAa,GAAGtC,MAAM,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdwC,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KADhB,EAEGC,IAFH,CAESC,aAAD,IAAmB;AACvBhC,MAAAA,SAAS,CAACgC,aAAD,CAAT;AACAT,MAAAA,OAAO,CAACU,OAAR,CAAgBC,SAAhB,GAA4BF,aAA5B;AACD,KALH;;AAMA,QAAIG,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChChC,MAAAA,OAAO,CAAC+B,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAAP;AACD;;AACD5C,IAAAA,MAAM,CAAC6C,EAAP,CAAU,IAAV,EAAiBC,EAAD,IAAQ9B,KAAK,CAAC8B,EAAD,CAA7B;AACA9C,IAAAA,MAAM,CAAC6C,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,KAFD;AAIAjD,IAAAA,MAAM,CAAC6C,EAAP,CAAU,iBAAV,EAA6B,CAAC;AAAEK,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAAkC;AAC7D,UAAIA,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,EAA1D,EAA8D;AAC5D,gBAAQD,IAAR;AACE,eAAK,OAAL;AACE1B,YAAAA,gBAAgB,CAAC2B,kBAAD,CAAhB;AACA;;AACF,eAAK,KAAL;AACEvB,YAAAA,gBAAgB,CAACuB,kBAAD,CAAhB;AACA;;AACF;AACEvB,YAAAA,gBAAgB,CAACuB,kBAAkB,CAAC,CAAD,CAAnB,CAAhB;AACA3B,YAAAA,gBAAgB,CAAC2B,kBAAkB,CAAC,CAAD,CAAnB,CAAhB;AACA;AAVJ;AAYD;AACF,KAfD;AAiBAnD,IAAAA,MAAM,CAAC6C,EAAP,CAAU,UAAV,EAAsB,CAAC;AAAEO,MAAAA,IAAF;AAAQzC,MAAAA,IAAI,EAAE0C,UAAd;AAA0BC,MAAAA;AAA1B,KAAD,KAAwC;AAC5DxC,MAAAA,OAAO,CAAC;AAAEyC,QAAAA,eAAe,EAAE,IAAnB;AAAyBH,QAAAA,IAAzB;AAA+BzC,QAAAA,IAAI,EAAE0C,UAArC;AAAiDC,QAAAA;AAAjD,OAAD,CAAP;AACD,KAFD;AAIAtD,IAAAA,MAAM,CAAC6C,EAAP,CAAU,QAAV,EAAoB,CAAC;AAAElC,MAAAA,IAAF;AAAQ6C,MAAAA,GAAG,EAAEC,KAAb;AAAoBC,MAAAA;AAApB,KAAD,KAAkC;AACpD5B,MAAAA,SAAS,CAAC;AAAE2B,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,CAAT;AACAC,MAAAA,UAAU,CAAC,MAAM;AACf7B,QAAAA,SAAS,CAAC,EAAD,CAAT;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KALD;AAMD,GA1CQ,EA0CN,EA1CM,CAAT,CApBmC,CAgEnC;AACA;AACA;;AAEA,QAAM8B,UAAU,GAAG,MAAM;AACvBxD,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAgB,IAAAA,YAAY,CAACP,IAAI,CAACuC,IAAN,CAAZ;AACA,UAAMS,IAAI,GAAG,IAAI/D,IAAJ,CAAS;AAAEgE,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,OAAO,EAAE,KAA7B;AAAoCxD,MAAAA;AAApC,KAAT,CAAb;AAEAsD,IAAAA,IAAI,CAAChB,EAAL,CAAQ,QAAR,EAAmBmB,IAAD,IAAU;AAC1BhE,MAAAA,MAAM,CAACiE,IAAP,CAAY,YAAZ,EAA0B;AACxBX,QAAAA,MAAM,EAAEU,IADgB;AAExBE,QAAAA,EAAE,EAAErD,IAAI,CAACuC,IAFe;AAGxBnC,QAAAA,QAAQ,EAAEN,IAHc;AAIxBuC,QAAAA,IAAI,EAAE,MAJkB;AAKxBiB,QAAAA,aAAa,EAAE,CAAC1C,WAAD,EAAcJ,WAAd;AALS,OAA1B;AAOD,KARD;AAUAwC,IAAAA,IAAI,CAAChB,EAAL,CAAQ,QAAR,EAAmBL,aAAD,IAAmB;AACnCR,MAAAA,SAAS,CAACS,OAAV,CAAkBC,SAAlB,GAA8BF,aAA9B;AACD,KAFD;AAIAqB,IAAAA,IAAI,CAACP,MAAL,CAAYzC,IAAI,CAACyC,MAAjB;AAEArB,IAAAA,aAAa,CAACQ,OAAd,GAAwBoB,IAAxB;AACD,GAtBD;;AAwBA,QAAMO,QAAQ,GAAItB,EAAD,IAAQ;AACvB,UAAMe,IAAI,GAAG,IAAI/D,IAAJ,CAAS;AAAEgE,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,OAAO,EAAE,KAA5B;AAAmCxD,MAAAA;AAAnC,KAAT,CAAb;AACAa,IAAAA,YAAY,CAAC0B,EAAD,CAAZ;AACAe,IAAAA,IAAI,CAAChB,EAAL,CAAQ,QAAR,EAAmBmB,IAAD,IAAU;AAC1BhE,MAAAA,MAAM,CAACiE,IAAP,CAAY,UAAZ,EAAwB;AACtBI,QAAAA,UAAU,EAAEvB,EADU;AAEtBwB,QAAAA,UAAU,EAAEN,IAFU;AAGtBZ,QAAAA,IAAI,EAAErC,EAHgB;AAItBJ,QAAAA;AAJsB,OAAxB;AAMD,KAPD;AASAkD,IAAAA,IAAI,CAAChB,EAAL,CAAQ,QAAR,EAAmBL,aAAD,IAAmB;AACnCR,MAAAA,SAAS,CAACS,OAAV,CAAkBC,SAAlB,GAA8BF,aAA9B;AACD,KAFD;AAIAxC,IAAAA,MAAM,CAAC6C,EAAP,CAAU,cAAV,EAA0B,CAAC;AAAES,MAAAA,MAAF;AAAUrC,MAAAA;AAAV,KAAD,KAA0B;AAClDb,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAc,MAAAA,WAAW,CAACD,QAAD,CAAX;AACA4C,MAAAA,IAAI,CAACP,MAAL,CAAYA,MAAZ;AACAtD,MAAAA,MAAM,CAACiE,IAAP,CAAY,eAAZ,EAA6B;AAC3Bf,QAAAA,IAAI,EAAE,MADqB;AAE3BC,QAAAA,kBAAkB,EAAE,CAAC1B,WAAD,EAAcJ,WAAd;AAFO,OAA7B;AAID,KARD;AAUAY,IAAAA,aAAa,CAACQ,OAAd,GAAwBoB,IAAxB;AACD,GA3BD;;AA6BA,QAAMU,WAAW,GAAG,MAAM;AACxBjD,IAAAA,cAAc,CAAEkD,aAAD,IAAmB;AAChCxE,MAAAA,MAAM,CAACiE,IAAP,CAAY,eAAZ,EAA6B;AAC3Bf,QAAAA,IAAI,EAAE,OADqB;AAE3BC,QAAAA,kBAAkB,EAAE,CAACqB;AAFM,OAA7B;AAIAjE,MAAAA,MAAM,CAACkE,cAAP,GAAwB,CAAxB,EAA2BC,OAA3B,GAAqC,CAACF,aAAtC;AACA,aAAO,CAACA,aAAR;AACD,KAPa,CAAd;AAQD,GATD;;AAUA,QAAMG,SAAS,GAAG,MAAM;AACtBjD,IAAAA,cAAc,CAAE8C,aAAD,IAAmB;AAChCxE,MAAAA,MAAM,CAACiE,IAAP,CAAY,eAAZ,EAA6B;AAC3Bf,QAAAA,IAAI,EAAE,KADqB;AAE3BC,QAAAA,kBAAkB,EAAE,CAACqB;AAFM,OAA7B;AAIAjE,MAAAA,MAAM,CAACqE,cAAP,GAAwB,CAAxB,EAA2BF,OAA3B,GAAqC,CAACF,aAAtC;AACA,aAAO,CAACA,aAAR;AACD,KAPa,CAAd;AAQD,GATD;;AAWA,QAAMK,SAAS,GAAG,MAAM;AACtBvE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA2B,IAAAA,aAAa,CAACQ,OAAd,CAAsBqC,OAAtB;AACA9E,IAAAA,MAAM,CAACiE,IAAP,CAAY,SAAZ,EAAuB;AAAEnB,MAAAA,EAAE,EAAE3B;AAAN,KAAvB;AACA4B,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GAND;;AAQA,QAAM8B,UAAU,GAAG,MAAM;AACvB/E,IAAAA,MAAM,CAACiE,IAAP,CAAY,SAAZ,EAAuB;AAAEnB,MAAAA,EAAE,EAAE3B;AAAN,KAAvB;AACD,GAFD;;AAGA,QAAM6D,OAAO,GAAIvB,KAAD,IAAW;AACzBzD,IAAAA,MAAM,CAACiE,IAAP,CAAY,SAAZ,EAAuB;AAAEtD,MAAAA,IAAF;AAAQuD,MAAAA,EAAE,EAAE/C,SAAZ;AAAuBqC,MAAAA,GAAG,EAAEC,KAA5B;AAAmCC,MAAAA,MAAM,EAAE/C;AAA3C,KAAvB;AACA,QAAI6C,GAAG,GAAG,EAAV;AACAA,IAAAA,GAAG,CAACA,GAAJ,GAAUC,KAAV;AACAD,IAAAA,GAAG,CAACN,IAAJ,GAAW,MAAX;AACAM,IAAAA,GAAG,CAACyB,SAAJ,GAAgBC,IAAI,CAACC,GAAL,EAAhB;AACA3B,IAAAA,GAAG,CAACE,MAAJ,GAAa/C,IAAb;AACAD,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU+C,GAAV,CAAD,CAAP;AACD,GARD;;AAUA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACL3C,MAAAA,IADK;AAELV,MAAAA,YAFK;AAGL4B,MAAAA,OAHK;AAILC,MAAAA,SAJK;AAKLzB,MAAAA,MALK;AAMLI,MAAAA,IANK;AAOLC,MAAAA,OAPK;AAQLP,MAAAA,SARK;AASLU,MAAAA,EATK;AAULqD,MAAAA,QAVK;AAWLS,MAAAA,SAXK;AAYLjB,MAAAA,UAZK;AAaLoB,MAAAA,OAbK;AAcLnD,MAAAA,MAdK;AAeLpB,MAAAA,IAfK;AAgBLC,MAAAA,OAhBK;AAiBLoB,MAAAA,SAjBK;AAkBLV,MAAAA,YAlBK;AAmBL2D,MAAAA,UAnBK;AAoBL9D,MAAAA,QApBK;AAqBLI,MAAAA,WArBK;AAsBLC,MAAAA,cAtBK;AAuBLC,MAAAA,aAvBK;AAwBLC,MAAAA,gBAxBK;AAyBL+C,MAAAA,WAzBK;AA0BL9C,MAAAA,WA1BK;AA2BLE,MAAAA,aA3BK;AA4BLgD,MAAAA;AA5BK,KADT;AAAA,cAgCGzE;AAhCH;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CAvMD;;GAAMD,U;;KAAAA,U;AAyMN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport VideoContext from \"./VideoContext\";\r\nimport { io } from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\n\r\nconst URL = \"https://fathomless-tundra-67025.herokuapp.com/\";\r\n// const SERVER_URL = \"http://localhost:5000/\";\r\n\r\nexport const socket = io(URL);\r\n\r\nconst VideoState = ({ children }) => {\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [stream, setStream] = useState();\r\n  const [chat, setChat] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [call, setCall] = useState({});\r\n  const [me, setMe] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [otherUser, setOtherUser] = useState(\"\");\r\n  const [myVdoStatus, setMyVdoStatus] = useState(true);\r\n  const [userVdoStatus, setUserVdoStatus] = useState();\r\n  const [myMicStatus, setMyMicStatus] = useState(true);\r\n  const [userMicStatus, setUserMicStatus] = useState();\r\n  const [msgRcv, setMsgRcv] = useState(\"\");\r\n\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((currentStream) => {\r\n        setStream(currentStream);\r\n        myVideo.current.srcObject = currentStream;\r\n      });\r\n    if (localStorage.getItem(\"name\")) {\r\n      setName(localStorage.getItem(\"name\"));\r\n    }\r\n    socket.on(\"me\", (id) => setMe(id));\r\n    socket.on(\"endCall\", () => {\r\n      window.location.reload();\r\n    });\r\n\r\n    socket.on(\"updateUserMedia\", ({ type, currentMediaStatus }) => {\r\n      if (currentMediaStatus !== null || currentMediaStatus !== []) {\r\n        switch (type) {\r\n          case \"video\":\r\n            setUserVdoStatus(currentMediaStatus);\r\n            break;\r\n          case \"mic\":\r\n            setUserMicStatus(currentMediaStatus);\r\n            break;\r\n          default:\r\n            setUserMicStatus(currentMediaStatus[0]);\r\n            setUserVdoStatus(currentMediaStatus[1]);\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"callUser\", ({ from, name: callerName, signal }) => {\r\n      setCall({ isReceivingCall: true, from, name: callerName, signal });\r\n    });\r\n\r\n    socket.on(\"msgRcv\", ({ name, msg: value, sender }) => {\r\n      setMsgRcv({ value, sender });\r\n      setTimeout(() => {\r\n        setMsgRcv({});\r\n      }, 2000);\r\n    });\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(chat);\r\n  // }, [chat]);\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n    setOtherUser(call.from);\r\n    const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"answerCall\", {\r\n        signal: data,\r\n        to: call.from,\r\n        userName: name,\r\n        type: \"both\",\r\n        myMediaStatus: [myMicStatus, myVdoStatus],\r\n      });\r\n    });\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    peer.signal(call.signal);\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const callUser = (id) => {\r\n    const peer = new Peer({ initiator: true, trickle: false, stream });\r\n    setOtherUser(id);\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"callUser\", {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name,\r\n      });\r\n    });\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    socket.on(\"callAccepted\", ({ signal, userName }) => {\r\n      setCallAccepted(true);\r\n      setUserName(userName);\r\n      peer.signal(signal);\r\n      socket.emit(\"updateMyMedia\", {\r\n        type: \"both\",\r\n        currentMediaStatus: [myMicStatus, myVdoStatus],\r\n      });\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const updateVideo = () => {\r\n    setMyVdoStatus((currentStatus) => {\r\n      socket.emit(\"updateMyMedia\", {\r\n        type: \"video\",\r\n        currentMediaStatus: !currentStatus,\r\n      });\r\n      stream.getVideoTracks()[0].enabled = !currentStatus;\r\n      return !currentStatus;\r\n    });\r\n  };\r\n  const updateMic = () => {\r\n    setMyMicStatus((currentStatus) => {\r\n      socket.emit(\"updateMyMedia\", {\r\n        type: \"mic\",\r\n        currentMediaStatus: !currentStatus,\r\n      });\r\n      stream.getAudioTracks()[0].enabled = !currentStatus;\r\n      return !currentStatus;\r\n    });\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n\r\n    connectionRef.current.destroy();\r\n    socket.emit(\"endCall\", { id: otherUser });\r\n    window.location.reload();\r\n  };\r\n\r\n  const leaveCall1 = () => {\r\n    socket.emit(\"endCall\", { id: otherUser });\r\n  };\r\n  const sendMsg = (value) => {\r\n    socket.emit(\"msgUser\", { name, to: otherUser, msg: value, sender: name });\r\n    let msg = {};\r\n    msg.msg = value;\r\n    msg.type = \"sent\";\r\n    msg.timestamp = Date.now();\r\n    msg.sender = name;\r\n    setChat([...chat, msg]);\r\n  };\r\n\r\n  return (\r\n    <VideoContext.Provider\r\n      value={{\r\n        call,\r\n        callAccepted,\r\n        myVideo,\r\n        userVideo,\r\n        stream,\r\n        name,\r\n        setName,\r\n        callEnded,\r\n        me,\r\n        callUser,\r\n        leaveCall,\r\n        answerCall,\r\n        sendMsg,\r\n        msgRcv,\r\n        chat,\r\n        setChat,\r\n        setMsgRcv,\r\n        setOtherUser,\r\n        leaveCall1,\r\n        userName,\r\n        myVdoStatus,\r\n        setMyVdoStatus,\r\n        userVdoStatus,\r\n        setUserVdoStatus,\r\n        updateVideo,\r\n        myMicStatus,\r\n        userMicStatus,\r\n        updateMic,\r\n      }}\r\n    >\r\n      {children}\r\n    </VideoContext.Provider>\r\n  );\r\n};\r\n\r\nexport default VideoState;\r\n"]},"metadata":{},"sourceType":"module"}