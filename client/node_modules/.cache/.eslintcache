[{"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\index.js":"1","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\reportWebVitals.js":"2","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\serviceWorker.js":"3","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\App.js":"4","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\Home.js":"5","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\components\\Footer\\Footer.js":"6","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\components\\options\\Options.js":"7","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\components\\Video\\Video.js":"8","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\context\\VideoState.js":"9","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\context\\VideoContext.js":"10"},{"size":595,"mtime":1624612575370,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1624612575371,"results":"13","hashOfConfig":"12"},{"size":4650,"mtime":1624612575372,"results":"14","hashOfConfig":"12"},{"size":473,"mtime":1624612575339,"results":"15","hashOfConfig":"12"},{"size":598,"mtime":1624612575340,"results":"16","hashOfConfig":"12"},{"size":524,"mtime":1624613954993,"results":"17","hashOfConfig":"12"},{"size":6816,"mtime":1624612575365,"results":"18","hashOfConfig":"12"},{"size":7243,"mtime":1624612575364,"results":"19","hashOfConfig":"12"},{"size":5717,"mtime":1624612575368,"results":"20","hashOfConfig":"12"},{"size":116,"mtime":1624612575367,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jwmsoh",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\index.js",[],"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\reportWebVitals.js",[],"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\serviceWorker.js",[],"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\App.js",[],"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\Home.js",["46","47"],"import { useEffect } from \"react\";\r\n\r\nimport Video from \"./components/Video/Video\";\r\nimport VideoState from \"./context/VideoState\";\r\n\r\nimport Options from \"./components/options/Options\";\r\nimport Footer from \"./components/Footer/Footer\";\r\n\r\nconst Home = () => {\r\n  useEffect(() => {\r\n    if (!navigator.onLine) alert(\"Connect to internet!\");\r\n  }, [navigator]);\r\n  return (\r\n    <VideoState>\r\n      <div className=\"App\" style={{ height: \"100%\", width: \"100%\" }}>\r\n        <Video />\r\n        <Options />\r\n        {/* <Footer /> */}\r\n      </div>\r\n    </VideoState>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\components\\options\\Options.js",["48","49","50","51","52","53"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { Input, Button, Tooltip, Modal, message } from \"antd\";\r\nimport Phone from \"../../assests/phone.gif\";\r\nimport Teams from \"../../assests/teams.mp3\";\r\nimport * as classes from \"./Options.module.css\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport VideoContext from \"../../context/VideoContext\";\r\nimport Hang from \"../../assests/hang.svg\";\r\nimport {\r\n  TwitterIcon,\r\n  TwitterShareButton,\r\n  WhatsappShareButton,\r\n  WhatsappIcon,\r\n  FacebookIcon,\r\n  FacebookShareButton,\r\n} from \"react-share\";\r\nimport {\r\n  UserOutlined,\r\n  CopyOutlined,\r\n  InfoCircleOutlined,\r\n  PhoneOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { socket } from \"../../context/VideoState\";\r\n\r\nconst Options = () => {\r\n  const [idToCall, setIdToCall] = useState(\"\");\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const Audio = useRef();\r\n  const {\r\n    call,\r\n    callAccepted,\r\n    myVideo,\r\n    userVideo,\r\n    stream,\r\n    name,\r\n    setName,\r\n    callEnded,\r\n    me,\r\n    callUser,\r\n    leaveCall,\r\n    answerCall,\r\n    otherUser,\r\n    setOtherUser,\r\n    leaveCall1,\r\n  } = useContext(VideoContext);\r\n\r\n  useEffect(() => {\r\n    if (isModalVisible) {\r\n      Audio?.current?.play();\r\n    } else Audio?.current?.pause();\r\n  }, [isModalVisible]);\r\n\r\n  const showModal = (showVal) => {\r\n    setIsModalVisible(showVal);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    leaveCall1();\r\n    window.location.reload();\r\n  };\r\n  useEffect(() => {\r\n    if (call.isReceivingCall && !callAccepted) {\r\n      setIsModalVisible(true);\r\n      setOtherUser(call.from);\r\n    } else setIsModalVisible(false);\r\n  }, [call.isReceivingCall]);\r\n\r\n  return (\r\n    <div className={classes.options}>\r\n      <div style={{ marginBottom: \"0.5rem\" }}>\r\n        <h2>Account Info</h2>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder=\"Your name\"\r\n          prefix={<UserOutlined />}\r\n          maxLength={15}\r\n          suffix={<small>{name.length}/15</small>}\r\n          value={name}\r\n          onChange={(e) => {\r\n            setName(e.target.value);\r\n            localStorage.setItem(\"name\", e.target.value);\r\n          }}\r\n          className={classes.inputgroup}\r\n        />\r\n\r\n        <div className={classes.share_options}>\r\n          <CopyToClipboard text={me}>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<CopyOutlined />}\r\n              className={classes.btn}\r\n              tabIndex=\"0\"\r\n              onClick={() => message.success(\"Code copied successfully!\")}\r\n            >\r\n              Copy code\r\n            </Button>\r\n          </CopyToClipboard>\r\n\r\n          <div className={classes.share_social}>\r\n            <WhatsappShareButton\r\n              url={`https://video-chat-mihir.web.app/`}\r\n              title={`Join this meeting with the given code \"\"\\n`}\r\n              separator=\"Link: \"\r\n              className={classes.share_icon}\r\n            >\r\n              <WhatsappIcon size={26} round />\r\n            </WhatsappShareButton>\r\n            <FacebookShareButton\r\n              url={`https://video-chat-mihir.web.app/`}\r\n              title={`Join this meeting with the given code \"\"\\n`}\r\n              className={classes.share_icon}\r\n            >\r\n              <FacebookIcon size={26} round />\r\n            </FacebookShareButton>\r\n            <TwitterShareButton\r\n              url={`https://video-chat-mihir.web.app/`}\r\n              title={`Join this meeting with the given code  \\n`}\r\n              className={classes.share_icon}\r\n            >\r\n              <TwitterIcon size={26} round className={classes.share_border} />\r\n            </TwitterShareButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ marginBottom: \"0.5rem\" }}>\r\n        <h2>Make a call</h2>\r\n\r\n        <Input\r\n          placeholder=\"Enter code to call\"\r\n          size=\"large\"\r\n          className={classes.inputgroup}\r\n          value={idToCall}\r\n          onChange={(e) => setIdToCall(e.target.value)}\r\n          style={{ marginRight: \"0.5rem\", marginBottom: \"0.5rem\" }}\r\n          prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n          suffix={\r\n            <Tooltip title=\"Enter code of the other user\">\r\n              <InfoCircleOutlined style={{ color: \"rgba(0,0,0,.45)\" }} />\r\n            </Tooltip>\r\n          }\r\n        />\r\n\r\n        {callAccepted && !callEnded ? (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={leaveCall}\r\n            className={classes.hang}\r\n            tabIndex=\"0\"\r\n          >\r\n            <img src={Hang} alt=\"hang up\" style={{ height: \"15px\" }} />\r\n            &nbsp; Hang up\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            type=\"primary\"\r\n            icon={<PhoneOutlined />}\r\n            onClick={() => {\r\n              if (name.length) callUser(idToCall);\r\n              else message.error(\"Please enter your name to call!\");\r\n            }}\r\n            className={classes.btn}\r\n            tabIndex=\"0\"\r\n          >\r\n            Call\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      {call.isReceivingCall && !callAccepted && (\r\n        <>\r\n          <audio src={Teams} loop ref={Audio} />\r\n          <Modal\r\n            title=\"Incoming Call\"\r\n            visible={isModalVisible}\r\n            onOk={() => showModal(false)}\r\n            onCancel={handleCancel}\r\n            footer={null}\r\n          >\r\n            <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n              <h1>\r\n                {call.name} is calling you:{\" \"}\r\n                <img\r\n                  src={Phone}\r\n                  alt=\"phone ringing\"\r\n                  className={classes.phone}\r\n                  style={{ display: \"inline-block\" }}\r\n                />\r\n              </h1>\r\n            </div>\r\n            <div className={classes.btnDiv}>\r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.answer}\r\n                color=\"#29bb89\"\r\n                icon={<PhoneOutlined />}\r\n                onClick={() => {\r\n                  answerCall();\r\n                  Audio.current.pause();\r\n                }}\r\n                tabIndex=\"0\"\r\n              >\r\n                Answer\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.decline}\r\n                icon={<PhoneOutlined />}\r\n                onClick={() => {\r\n                  setIsModalVisible(false);\r\n                  Audio.current.pause();\r\n                }}\r\n                tabIndex=\"0\"\r\n              >\r\n                Decline\r\n              </Button>\r\n            </div>\r\n          </Modal>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\components\\Video\\Video.js",["54","55","56","57","58","59","60","61","62","63"],"import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport VideoContext from \"../../context/VideoContext\";\r\nimport \"./Video.css\";\r\nimport { Card, Modal, Button, Input, notification, Avatar } from \"antd\";\r\nimport Man from \"../../assests/man.svg\";\r\nimport VideoIcon from \"../../assests/video.svg\";\r\nimport { io } from \"socket.io-client\";\r\nimport VideoOff from \"../../assests/video-off.svg\";\r\n// import Profile from \"../../assests/profile.svg\";\r\nimport Msg_Illus from \"../../assests/msg_illus.svg\";\r\nimport Msg from \"../../assests/msg.svg\";\r\nimport { UserOutlined, MessageOutlined } from \"@ant-design/icons\";\r\n\r\nimport { socket } from \"../../context/VideoState\";\r\n\r\n// const socket = io()\r\nconst { Search } = Input;\r\nconst Video = () => {\r\n  const {\r\n    call,\r\n    callAccepted,\r\n    myVideo,\r\n    userVideo,\r\n    stream,\r\n    name,\r\n    setName,\r\n    callEnded,\r\n    me,\r\n    callUser,\r\n    leaveCall,\r\n    answerCall,\r\n    sendMsg: sendMsgFunc,\r\n    msgRcv,\r\n    chat,\r\n    setChat,\r\n    userName,\r\n    myVdoStatus,\r\n    userVdoStatus,\r\n    updateVideo,\r\n    myMicStatus,\r\n    userMicStatus,\r\n    updateMic,\r\n  } = useContext(VideoContext);\r\n\r\n  const [sendMsg, setSendMsg] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  socket.on(\"msgRcv\", ({ name, msg: value, sender }) => {\r\n    let msg = {};\r\n    msg.msg = value;\r\n    msg.type = \"rcv\";\r\n    msg.sender = sender;\r\n    msg.timestamp = Date.now();\r\n    setChat([...chat, msg]);\r\n  });\r\n\r\n  const dummy = useRef();\r\n\r\n  useEffect(() => {\r\n    if (dummy?.current) dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chat]);\r\n\r\n  const showModal = (showVal) => {\r\n    setIsModalVisible(showVal);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    if (value && value.length) sendMsgFunc(value);\r\n    setSendMsg(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (msgRcv.value && !isModalVisible) {\r\n      notification.open({\r\n        message: \"\",\r\n        description: `${msgRcv.sender}: ${msgRcv.value}`,\r\n        icon: <MessageOutlined style={{ color: \"#108ee9\" }} />,\r\n      });\r\n    }\r\n  }, [msgRcv]);\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      {stream ? (\r\n        <div\r\n          style={{ textAlign: \"center\" }}\r\n          className=\"card\"\r\n          id={callAccepted && !callEnded ? \"video1\" : \"video3\"}\r\n        >\r\n          <div style={{ height: \"2rem\" }}>\r\n            <h3>{myVdoStatus && name}</h3>\r\n          </div>\r\n          <div className=\"video-avatar-container\">\r\n            <video\r\n              playsInline\r\n              muted\r\n              ref={myVideo}\r\n              autoPlay\r\n              className=\"video-active\"\r\n              style={{\r\n                opacity: `${myVdoStatus ? \"1\" : \"0\"}`,\r\n                transform: \"scaleX(-1)\",\r\n              }}\r\n            />\r\n\r\n            <Avatar\r\n              style={{\r\n                backgroundColor: \"#116\",\r\n                position: \"absolute\",\r\n                opacity: `${myVdoStatus ? \"-1\" : \"2\"}`,\r\n              }}\r\n              size={98}\r\n              icon={!name && <UserOutlined />}\r\n            >\r\n              {name}\r\n            </Avatar>\r\n          </div>\r\n\r\n          <div className=\"iconsDiv\">\r\n            <div\r\n              className=\"icons\"\r\n              onClick={() => {\r\n                updateMic();\r\n              }}\r\n              tabIndex=\"0\"\r\n            >\r\n              <i\r\n                className={`fa fa-microphone${myMicStatus ? \"\" : \"-slash\"}`}\r\n                style={{ transform: \"scaleX(-1)\" }}\r\n                aria-label={`${myMicStatus ? \"mic on\" : \"mic off\"}`}\r\n                aria-hidden=\"true\"\r\n              ></i>\r\n            </div>\r\n\r\n            {callAccepted && !callEnded && (\r\n              <div\r\n                className=\"icons\"\r\n                onClick={() => {\r\n                  setIsModalVisible(!isModalVisible);\r\n                }}\r\n                tabIndex=\"0\"\r\n              >\r\n                <img src={Msg} alt=\"chat icon\" />\r\n              </div>\r\n            )}\r\n            <Modal\r\n              title=\"Chat\"\r\n              footer={null}\r\n              visible={isModalVisible}\r\n              onOk={() => showModal(false)}\r\n              onCancel={() => showModal(false)}\r\n              style={{ maxHeight: \"100px\" }}\r\n            >\r\n              {chat.length ? (\r\n                <div className=\"msg_flex\">\r\n                  {chat.map((msg) => (\r\n                    <div\r\n                      className={msg.type === \"sent\" ? \"msg_sent\" : \"msg_rcv\"}\r\n                    >\r\n                      {msg.msg}\r\n                    </div>\r\n                  ))}\r\n                  <div ref={dummy} id=\"no_border\"></div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"chat_img_div\">\r\n                  <img src={Msg_Illus} alt=\"msg_illus\" className=\"img_illus\" />\r\n                </div>\r\n              )}\r\n              <Search\r\n                placeholder=\"your message\"\r\n                allowClear\r\n                className=\"input_msg\"\r\n                enterButton=\"Send 🚀\"\r\n                onChange={(e) => setSendMsg(e.target.value)}\r\n                value={sendMsg}\r\n                size=\"large\"\r\n                onSearch={onSearch}\r\n              />\r\n            </Modal>\r\n\r\n            <div className=\"icons\" onClick={() => updateVideo()} tabIndex=\"0\">\r\n              {myVdoStatus ? (\r\n                <img src={VideoIcon} alt=\"video on icon\" />\r\n              ) : (\r\n                <img src={VideoOff} alt=\"video off icon\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"bouncing-loader\">\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      )}\r\n\r\n      {callAccepted && !callEnded && userVideo && (\r\n        <div className=\"card2\" style={{ textAlign: \"center\" }} id=\"video2\">\r\n          <div style={{ height: \"2rem\" }}>\r\n            <h3>{userVdoStatus && (call.name || userName)}</h3>\r\n          </div>\r\n\r\n          <div className=\"video-avatar-container\">\r\n            <video\r\n              playsInline\r\n              ref={userVideo}\r\n              autoPlay\r\n              className=\"video-active\"\r\n              style={{\r\n                opacity: `${userVdoStatus ? \"1\" : \"0\"}`,\r\n              }}\r\n            />\r\n\r\n            <Avatar\r\n              style={{\r\n                backgroundColor: \"#116\",\r\n                position: \"absolute\",\r\n                opacity: `${userVdoStatus ? \"-1\" : \"2\"}`,\r\n              }}\r\n              size={98}\r\n              icon={!(userName || call.name) && <UserOutlined />}\r\n            >\r\n              {userName || call.name}\r\n            </Avatar>\r\n            {!userMicStatus && (\r\n              <i\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"0\",\r\n                  left: \"0\",\r\n                  padding: \"0.3rem\",\r\n                  backgroundColor: \"#fefefebf\",\r\n                }}\r\n                className=\"fad fa-volume-mute fa-2x\"\r\n                aria-hidden=\"true\"\r\n                aria-label=\"microphone muted\"\r\n              ></i>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\context\\VideoState.js",[],"C:\\Users\\ARNAV\\Documents\\Video-Chat\\client\\src\\context\\VideoContext.js",["64"],"import React, { createContext } from \"react\";\r\nconst VideoContext = createContext();\r\nexport default VideoContext;\r\n",{"ruleId":"65","severity":1,"message":"66","line":7,"column":8,"nodeType":"67","messageId":"68","endLine":7,"endColumn":14},{"ruleId":"69","severity":1,"message":"70","line":12,"column":6,"nodeType":"71","endLine":12,"endColumn":17,"suggestions":"72"},{"ruleId":"65","severity":1,"message":"73","line":23,"column":10,"nodeType":"67","messageId":"68","endLine":23,"endColumn":16},{"ruleId":"65","severity":1,"message":"74","line":33,"column":5,"nodeType":"67","messageId":"68","endLine":33,"endColumn":12},{"ruleId":"65","severity":1,"message":"75","line":34,"column":5,"nodeType":"67","messageId":"68","endLine":34,"endColumn":14},{"ruleId":"65","severity":1,"message":"76","line":35,"column":5,"nodeType":"67","messageId":"68","endLine":35,"endColumn":11},{"ruleId":"65","severity":1,"message":"77","line":43,"column":5,"nodeType":"67","messageId":"68","endLine":43,"endColumn":14},{"ruleId":"69","severity":1,"message":"78","line":68,"column":6,"nodeType":"71","endLine":68,"endColumn":28,"suggestions":"79"},{"ruleId":"65","severity":1,"message":"80","line":4,"column":10,"nodeType":"67","messageId":"68","endLine":4,"endColumn":14},{"ruleId":"65","severity":1,"message":"81","line":4,"column":23,"nodeType":"67","messageId":"68","endLine":4,"endColumn":29},{"ruleId":"65","severity":1,"message":"82","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":11},{"ruleId":"65","severity":1,"message":"83","line":7,"column":10,"nodeType":"67","messageId":"68","endLine":7,"endColumn":12},{"ruleId":"65","severity":1,"message":"84","line":26,"column":5,"nodeType":"67","messageId":"68","endLine":26,"endColumn":12},{"ruleId":"65","severity":1,"message":"85","line":28,"column":5,"nodeType":"67","messageId":"68","endLine":28,"endColumn":7},{"ruleId":"65","severity":1,"message":"86","line":29,"column":5,"nodeType":"67","messageId":"68","endLine":29,"endColumn":13},{"ruleId":"65","severity":1,"message":"87","line":30,"column":5,"nodeType":"67","messageId":"68","endLine":30,"endColumn":14},{"ruleId":"65","severity":1,"message":"88","line":31,"column":5,"nodeType":"67","messageId":"68","endLine":31,"endColumn":15},{"ruleId":"69","severity":1,"message":"89","line":79,"column":6,"nodeType":"71","endLine":79,"endColumn":14,"suggestions":"90"},{"ruleId":"65","severity":1,"message":"91","line":1,"column":8,"nodeType":"67","messageId":"68","endLine":1,"endColumn":13},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'navigator'. Either exclude it or remove the dependency array. Outer scope values like 'navigator' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["92"],"'socket' is defined but never used.","'myVideo' is assigned a value but never used.","'userVideo' is assigned a value but never used.","'stream' is assigned a value but never used.","'otherUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'call.from', 'callAccepted', and 'setOtherUser'. Either include them or remove the dependency array.",["93"],"'Card' is defined but never used.","'Button' is defined but never used.","'Man' is defined but never used.","'io' is defined but never used.","'setName' is assigned a value but never used.","'me' is assigned a value but never used.","'callUser' is assigned a value but never used.","'leaveCall' is assigned a value but never used.","'answerCall' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isModalVisible'. Either include it or remove the dependency array.",["94"],"'React' is defined but never used.",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: []",{"range":"101","text":"102"},"Update the dependencies array to be: [call.from, call.isReceivingCall, callAccepted, setOtherUser]",{"range":"103","text":"104"},"Update the dependencies array to be: [isModalVisible, msgRcv]",{"range":"105","text":"106"},[347,358],"[]",[1714,1736],"[call.from, call.isReceivingCall, callAccepted, setOtherUser]",[2095,2103],"[isModalVisible, msgRcv]"]